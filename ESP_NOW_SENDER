
#include <esp_now.h>
#include <WiFi.h>
#include "HX711.h" 


#define LOADCELL_DOUT_PIN  16
#define LOADCELL_SCK_PIN  4

#define vcc 2
HX711 scale;
float weight();
float calibration_factor =  638;      // For 3 kg 638; //351 for 5kg / 1755 for 1 kg worked for my 440lb max scale setup


// REPLACE WITH YOUR RECEIVER MAC Address
uint8_t broadcastAddress[] = {0x24,0xDC,0xC3,0x9C,0x28,0xF8};

// Structure example to send data
// Must match the receiver structure
typedef struct struct_message {
  char a[32];
  int b;
  float c;
  bool d;
} struct_message;

// Create a struct_message called myData
struct_message myData;

esp_now_peer_info_t peerInfo;

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}
 
void setup() {
  // Init Serial Monitor
  Serial.begin(115200);

   pinMode(vcc,OUTPUT);
  digitalWrite(vcc,HIGH);
   //SerialBT.begin(" Wright machine 1"); //Bluetooth device name
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale();
  scale.tare();  //Reset the scale to 0

  long zero_factor = scale.read_average(); //Get a baseline reading
  Serial.print("Zero factor: "); //This can be used to remove the need to tare the scale. Useful in permanent scale projects.
  Serial.println(zero_factor);
  pinMode(15,INPUT);
 
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }
}
 
void loop() {
  // Set values to send
  
Serial.print(weight());
  strcpy(myData.a, "THIS IS A CHAR");
  myData.b = 12;
  myData.c = weight();;
  myData.d = false;
  
  // Send message via ESP-NOW
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));
   
  if (result == ESP_OK) {
    Serial.println("Sent with success");
  }
  else {
    Serial.println("Error sending the data");
  }
  delay(2000);
}








float weight() {
  scale.set_scale(calibration_factor); // Adjust to this calibration factor
//  delay(3000);
  float weight = scale.get_units(20); // Get the weight reading
  // Serial.print("Reading: ");
  // Serial.print(weight, 1);
  // Serial.print("Gram \t\n"); // Change this to kg and re-adjust the calibration factor if you follow SI units like a sane person
  // Serial.flush();
  delay(1000);
  return weight; // Return the weight reading
}
